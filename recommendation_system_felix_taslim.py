# -*- coding: utf-8 -*-
"""Recommendation System_Felix Taslim.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1U1S_qZo9wEjpz_U4Rrpy6o_S5d1arh5y

# Library Preparation
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

import kagglehub

from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import difflib

"""# Data Loading"""

path = kagglehub.dataset_download("abdallahwagih/movies")

print("Path to dataset files:", path)

# Read Dataset
file_path = path + "/movies.csv"
df = pd.read_csv(file_path)

"""# Data Understanding

## Exploratory Data Analysis

Berikut adalah EDA yang akan dilakukan:
- Melihat bentuk dataset dan tipe data pada dataset
- Melihat apakah ada missing value
- Melihat distribusi data pada dataset

### Melihat bentuk dataset dan tipe data pada dataset
"""

df.head()

"""Berikut adalah penjelasan dari variabel-variabel dataset ini:

* `index`: Indeks baris (tidak relevan secara analitis, hanya penomoran)
* `budget`: Anggaran produksi film (dalam satuan USD)
* `genres`: Daftar genre film (misalnya: Action, Comedy)
* `homepage`: URL homepage resmi film
* `id`: ID unik film (biasanya dari TMDB)
* `keywords`: Kata kunci terkait film (tag-topik relevan)
* `original_language`: Bahasa asli film (misalnya: en, fr)
* `original_title`: Judul asli film dalam bahasa produksinya
* `overview`: Ringkasan atau deskripsi singkat alur cerita film
* `popularity`: Skor popularitas film (dihitung oleh TMDB berdasarkan beberapa faktor)
* `production_companies`: Daftar perusahaan produksi yang terlibat
* `production_countries`: Daftar negara tempat film diproduksi
* `release_date`: Tanggal rilis film
* `revenue`: Total pendapatan kotor film (dalam USD)
* `runtime`: Durasi film (dalam menit)
* `spoken_languages`: Bahasa-bahasa yang digunakan dalam film
* `status`: Status rilis film (misalnya: Released, Post Production)
* `tagline`: Slogan atau kalimat promosi film
* `title`: Judul film (dalam format publik)
* `vote_average`: Rata-rata skor penilaian dari pengguna TMDB
* `vote_count`: Jumlah total suara/penilaian yang diberikan pengguna
* `cast`: Daftar aktor/aktris utama yang membintangi film
* `crew`: Daftar tim kru produksi (editor, penulis, dll)
* `director`: Nama sutradara film
"""

df.info()

df.dtypes

"""### Melihat apakah ada missing value"""

df.isnull().sum()

"""Ditemukan beberapa variabel yang memiliki missing value. Hal ini akan ditangani di bagian Data Preparation.

### Melihat distribusi data pada dataset (Univariate Analysis)
"""

numerical_features = df.select_dtypes(include=['int64', 'float64']).columns.tolist()
categorical_features = df.select_dtypes(include=['object']).columns.tolist()

"""#### Distribusi Data Kategorikal"""

for feature in categorical_features:
    print(f"\nDistribusi untuk fitur kategorikal: {feature.upper()}")
    count = df[feature].value_counts()
    percent = 100 * df[feature].value_counts(normalize=True)
    cat_df = pd.DataFrame({'Jumlah Sampel': count, 'Persentase (%)': percent.round(1)})
    print(cat_df.head(10))

"""#### Distribusi Data Numerikal"""

if 'index' in numerical_features:
    numerical_features.remove('index')

df[numerical_features].hist(bins=50, figsize=(20, 15), color='skyblue', edgecolor='black')
plt.suptitle('Distribusi Fitur Numerik', fontsize=20)
plt.tight_layout(rect=[0, 0, 1, 0.96])
plt.show()

"""Insight: Karena variabel Index tidak akan hanya sebuah penomoran dan tidak akan digunakan, maka tidak dilakukan plotting variabel Index

# Data Preparation

Berikut adalah hal yang dilakukan di Data Preparation:
- Seleksi Fitur
- Menangani Missing Value
- Penggabungan Fitur

## Seleksi Fitur
"""

fitur = ['genres','keywords', 'cast','director']

"""## Menangani Missing Value

Agar lebih efektif, missing value yang ditangani hanya akan dilakukan terhadap features yang terpilih.
"""

for i in fitur:
    df[i] = df[i].fillna('')

"""## Penggabungan Fitur"""

fitur_gabungan = df['genres'] + ' ' + df['keywords'] + ' ' + df['cast'] + ' ' + df['director']

"""# Modeling

## TF-IDF Vectorization
"""

vectorizer = TfidfVectorizer()

vector = vectorizer.fit_transform(fitur_gabungan)

"""## Cosine Similarity"""

similarity = cosine_similarity(vector)

"""# Inference"""

# Fungsi untuk rekomendasi film
def recommend_movies(movie_title, similarity_matrix=similarity, df=df, top_n=10):
    movie_list = df['title'].tolist()
    close_matches = difflib.get_close_matches(movie_title, movie_list, n=1, cutoff=0.5)

    if not close_matches:
        print("Movie not found in the database.")
        return

    closest_match = close_matches[0]
    movie_index = df[df['title'] == closest_match].index[0]
    similarity_scores = list(enumerate(similarity_matrix[movie_index]))
    similarity_scores = sorted(similarity_scores, key=lambda x: x[1], reverse=True)

    print(f"\nRekomendasi film mirip dengan '{closest_match}':\n")
    recommended = 0
    for idx, score in similarity_scores[1:top_n+1]:  # skip the input movie itself
        print(f"{recommended+1}. {df.iloc[idx]['title']}")
        recommended += 1

# Inferensi
user_input = input("Masukkan judul film: ")
recommend_movies(user_input, top_n=10)